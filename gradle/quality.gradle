apply plugin: "pmd"
apply plugin: "jacoco"
apply plugin: "findbugs"
apply plugin: "checkstyle"

def exclude = [
    // Android
    '**/R.class',
    '**/R$*.class',
    '**/Manifest*.*',
    '**/BuildConfig.*',
    // Android databinding
    '**/*databinding/*',
    '**/BR.*',
    // Dagger
    '**/*Dagger*.*',
    '**/Dagger*Component.class',
    '**/Dagger*Component$Builder.class',
    '**/*Module.*',
    '**/*MembersInjector*.*',
    '**/*_MembersInjector.class',
    '**/*_Factory.*',
    '**/*Module_*Factory.class',
    '**/*_Provide*Factory*.*']

/**
 * Generates Lint reports based off the source code.
 */
task("pmd", type: Pmd) {
    group "Reporting"
    description "Generate Pmd reports."

    reports {
        xml.enabled = false
        html.enabled = true
    }
    source = files(["src/main/java"])
    classpath = files()
    ruleSetFiles = files("${project.rootDir}/config/pmd/pmd.xml")
}

/**
 * Generates Jacoco coverage reports based off the unit tests.
 */
task("jacocoReport", type: JacocoReport) {
    group "Reporting"
    description "Generate Jacoco coverage reports."

    reports {
        xml.enabled = false
        html.enabled = true
    }
    sourceDirectories = files(["src/main/java"])
    classDirectories = (file("$project.buildDir/intermediates/classes").exists()
        ? fileTree(dir: "$project.buildDir/intermediates/classes", excludes: exclude)
        : fileTree(dir: "$project.buildDir/classes", excludes: exclude))
    executionData = fileTree(dir: "$project.buildDir", includes: ["jacoco/*.exec"])
}

/**
 * Generates FindBugs reports based off the source code.
 */
task("findBugs", type: FindBugs,
    dependsOn: file("$project.buildDir/intermediates/classes").exists() ? "assembleDebug" :
        "assemble") {
    group "Reporting"
    description "Generate Findbugs reports."

    reports {
        xml.enabled = false
        html.enabled = true
    }
    effort = "max"
    reportLevel = "low"
    source "src/main/java"
    classpath = files()
    classes = (file("$project.buildDir/intermediates/classes").exists()
        ? fileTree(dir: "$project.buildDir/intermediates/classes", excludes: exclude)
        : fileTree(dir: "$project.buildDir/classes", excludes: exclude))
    excludeFilter = file("${project.rootDir}/config/findbugs/findbugs.xml")
}

/**
 * Generates Checkstyle reports based off the source code.
 */
task("checkstyle", type: Checkstyle) {
    group "Reporting"
    description "Generate Checkstyle reports."

    reports.html.enabled = true
    showViolations true
    source "src/main/java"
    classpath = files()
    configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
}

afterEvaluate {
    tasks.findByName("check").dependsOn("pmd", "findBugs", "checkstyle", "jacocoReport")
}
