apply plugin: "pmd"
apply plugin: "jacoco"
apply plugin: "findbugs"
apply plugin: "checkstyle"

/**
 * Generates Lint reports based off the source code.
 */
task("pmd", type: Pmd) {
    group "Reporting"
    description "Generate Pmd reports."

    reports {
        xml.enabled = true
        html.enabled = true
    }
    ignoreFailures = true
    include "**/*.java"
    exclude "**/*Test.java"
    source = files(["src/main/java"])
    classpath = files()
}

/**
 * Generates Jacoco coverage reports based off the unit tests.
 */
task("jacocoReport", type: JacocoReport) {
    group "Reporting"
    description "Generate Jacoco coverage reports."

    reports {
        xml.enabled = true
        html.enabled = true
    }
    sourceDirectories = files(["src/main/java"])
    classDirectories = (file("$project.buildDir/classes").exists()
        ? files("$project.buildDir/classes")
        : files("$project.buildDir/intermediates/classes/debug"))
    executionData = fileTree(dir: "$project.buildDir", includes: ["jacoco/*.exec"])
}

/**
 * Generates FindBugs reports based off the source code.
 */
task("findBugs", type: FindBugs) {
    group "Reporting"
    description "Generate Findbugs reports."

    reports {
        xml.enabled = false
        html.enabled = true
    }
    ignoreFailures = true
    effort = "max"
    reportLevel = "low"
    source "src/main/java"
    include "**/*.java"
    exclude "**/*Test.java"
    classpath = files()
    classes = (file("$project.buildDir/classes").exists()
        ? files("$project.buildDir/classes")
        : files("$project.buildDir/intermediates/classes/debug"))
}

/**
 * Generates Checkstyle reports based off the source code.
 */
task("checkstyle", type: Checkstyle) {
    group "Reporting"
    description "Generate Checkstyle reports."

    reports.html.enabled = true
    configFile rootProject.file("config/checkstyle/checkstyle.xml")
    ignoreFailures false
    showViolations true
    source "src/main/java"
    include "**/*.java"
    exclude "**/*Test.java"
    classpath = files()
}

afterEvaluate {
    tasks.findByName("check").dependsOn("pmd")
    tasks.findByName("check").dependsOn("jacocoReport")
    tasks.findByName("check").dependsOn("findBugs")
    tasks.findByName("check").dependsOn("checkstyle")
}
